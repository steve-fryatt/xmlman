/* Copyright 2018-2024, Stephen Fryatt (info@stevefryatt.org.uk)
 *
 * This file is part of XmlMan:
 *
 *   http://www.stevefryatt.org.uk/risc-os
 *
 * Licensed under the EUPL, Version 1.2 only (the "Licence");
 * You may not use this work except in compliance with the
 * Licence.
 *
 * You may obtain a copy of the Licence at:
 *
 *   http://joinup.ec.europa.eu/software/page/eupl
 *
 * Unless required by applicable law or agreed to in
 * writing, software distributed under the Licence is
 * distributed on an "AS IS" basis, WITHOUT WARRANTIES
 * OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the Licence for the specific language governing
 * permissions and limitations under the Licence.
 */

/**
 * \file manual_entity.h
 *
 * XML Manual Entity Decoding Interface.
 */

#ifndef XMLMAN_MANUAL_ENTITY_H
#define XMLMAN_MANUAL_ENTITY_H

/**
 * No Unicode codepoint is available.
 */

#define MANUAL_ENTITY_NO_CODEPOINT (-1)

/**
 * A list of entities known to the parser.
 * 
 * It *must* correspond to the order that the entity values are
 * defined in manual_entity.c, so that the array indices match the
 * values of their enum entries.
 *
 * The values in that table are ordered by ascending unicode point,
 * with non-unicode entities at the start using -1 and NONE at the
 * end as an end stop. The order of the entity texts are not important.
 */

enum manual_entity_type {
	/* Non-Standard Special Cases */

	MANUAL_ENTITY_SMILEYFACE,
	MANUAL_ENTITY_SADFACE,
	MANUAL_ENTITY_MSEP,

	/* Basic Latin */

	MANUAL_ENTITY_QUOT,
	MANUAL_ENTITY_AMP,
	MANUAL_ENTITY_APOS,
	MANUAL_ENTITY_LT,
	MANUAL_ENTITY_GT,

	/* Latin-1 Supplement */

	MANUAL_ENTITY_NBSP,
	MANUAL_ENTITY_IEXCL,
	MANUAL_ENTITY_CENT,
	MANUAL_ENTITY_POUND,
	MANUAL_ENTITY_CURREN,
	MANUAL_ENTITY_YEN,
	MANUAL_ENTITY_BRVBAR,
	MANUAL_ENTITY_SECT,
	MANUAL_ENTITY_UML,
	MANUAL_ENTITY_COPY,
	MANUAL_ENTITY_ORDF,
	MANUAL_ENTITY_LAQUO,
	MANUAL_ENTITY_NOT,
	MANUAL_ENTITY_SHY,
	MANUAL_ENTITY_REG,
	MANUAL_ENTITY_MACR,
	MANUAL_ENTITY_DEG,
	MANUAL_ENTITY_PLUSMN,
	MANUAL_ENTITY_SUP2,
	MANUAL_ENTITY_SUP3,
	MANUAL_ENTITY_ACUTE,
	MANUAL_ENTITY_MICRO,
	MANUAL_ENTITY_PARA,
	MANUAL_ENTITY_MIDDOT,
	MANUAL_ENTITY_CEDIL,
	MANUAL_ENTITY_SUP1,
	MANUAL_ENTITY_ORDM,
	MANUAL_ENTITY_RAQUO,
	MANUAL_ENTITY_FRAC14,
	MANUAL_ENTITY_FRAC12,
	MANUAL_ENTITY_FRAC34,
	MANUAL_ENTITY_IQUEST,
	MANUAL_ENTITY_AGRAVE_U,
	MANUAL_ENTITY_AACUTE_U,
	MANUAL_ENTITY_ACIRC_U,
	MANUAL_ENTITY_ATILDE_U,
	MANUAL_ENTITY_AUML_U,
	MANUAL_ENTITY_ARING_U,
	MANUAL_ENTITY_AELIG_U,
	MANUAL_ENTITY_CCEDIL_U,
	MANUAL_ENTITY_EGRAVE_U,
	MANUAL_ENTITY_EACUTE_U,
	MANUAL_ENTITY_ECIRC_U,
	MANUAL_ENTITY_EUML_U,
	MANUAL_ENTITY_IGRAVE_U,
	MANUAL_ENTITY_IACUTE_U,
	MANUAL_ENTITY_ICIRC_U,
	MANUAL_ENTITY_IUML_U,
	MANUAL_ENTITY_ETH_U,
	MANUAL_ENTITY_NTILDE_U,
	MANUAL_ENTITY_OGRAVE_U,
	MANUAL_ENTITY_OACUTE_U,
	MANUAL_ENTITY_OCIRC_U,
	MANUAL_ENTITY_OTILDE_U,
	MANUAL_ENTITY_OUML_U,
	MANUAL_ENTITY_TIMES,
	MANUAL_ENTITY_OSLASH_U,
	MANUAL_ENTITY_UGRAVE_U,
	MANUAL_ENTITY_UACUTE_U,
	MANUAL_ENTITY_UCIRC_U,
	MANUAL_ENTITY_UUML_U,
	MANUAL_ENTITY_YACUTE_U,
	MANUAL_ENTITY_THORN_U,
	MANUAL_ENTITY_SZLIG_L,
	MANUAL_ENTITY_AGRAVE_L,
	MANUAL_ENTITY_AACUTE_L,
	MANUAL_ENTITY_ACIRC_L,
	MANUAL_ENTITY_ATILDE_L,
	MANUAL_ENTITY_AUML_L,
	MANUAL_ENTITY_ARING_L,
	MANUAL_ENTITY_AELIG_L,
	MANUAL_ENTITY_CCEDIL_L,
	MANUAL_ENTITY_EGRAVE_L,
	MANUAL_ENTITY_EACUTE_L,
	MANUAL_ENTITY_ECIRC_L,
	MANUAL_ENTITY_EUML_L,
	MANUAL_ENTITY_IGRAVE_L,
	MANUAL_ENTITY_IACUTE_L,
	MANUAL_ENTITY_ICIRC_L,
	MANUAL_ENTITY_IUML_L,
	MANUAL_ENTITY_ETH_L,
	MANUAL_ENTITY_NTILDE_L,
	MANUAL_ENTITY_OGRAVE_L,
	MANUAL_ENTITY_OACUTE_L,
	MANUAL_ENTITY_OCIRC_L,
	MANUAL_ENTITY_OTILDE_L,
	MANUAL_ENTITY_OUML_L,
	MANUAL_ENTITY_DIV,
	MANUAL_ENTITY_OSLASH_L,
	MANUAL_ENTITY_UGRAVE_L,
	MANUAL_ENTITY_UACUTE_L,
	MANUAL_ENTITY_UCIRC_L,
	MANUAL_ENTITY_UUML_L,
	MANUAL_ENTITY_YACUTE_L,
	MANUAL_ENTITY_THORN_L,
	MANUAL_ENTITY_YUML_L,

	/* Latin Extended A */

	MANUAL_ENTITY_AMACR_U,
	MANUAL_ENTITY_AMACR_L,
	MANUAL_ENTITY_ABREVE_U,
	MANUAL_ENTITY_ABREVE_L,
	MANUAL_ENTITY_AOGON_U,
	MANUAL_ENTITY_AOGON_L,
	MANUAL_ENTITY_CACUTE_U,
	MANUAL_ENTITY_CACUTE_L,
	MANUAL_ENTITY_CCIRC_U,
	MANUAL_ENTITY_CCIRC_L,
	MANUAL_ENTITY_CDOT_U,
	MANUAL_ENTITY_CDOT_L,
	MANUAL_ENTITY_CCARON_U,
	MANUAL_ENTITY_CCARON_L,
	MANUAL_ENTITY_DCARON_U,
	MANUAL_ENTITY_DCARON_L,
	MANUAL_ENTITY_DSTROK_U,
	MANUAL_ENTITY_DSTROK_L,
	MANUAL_ENTITY_EMACR_U,
	MANUAL_ENTITY_EMACR_L,
	MANUAL_ENTITY_EDOT_U,
	MANUAL_ENTITY_EDOT_L,
	MANUAL_ENTITY_EOGON_U,
	MANUAL_ENTITY_EOGON_L,
	MANUAL_ENTITY_ECARON_U,
	MANUAL_ENTITY_ECARON_L,
	MANUAL_ENTITY_GCIRC_U,
	MANUAL_ENTITY_GCIRC_L,
	MANUAL_ENTITY_GBREVE_U,
	MANUAL_ENTITY_GBREVE_L,
	MANUAL_ENTITY_GDOT_U,
	MANUAL_ENTITY_GDOT_L,
	MANUAL_ENTITY_GCEDIL,
	MANUAL_ENTITY_HCIRC_U,
	MANUAL_ENTITY_HCIRC_L,
	MANUAL_ENTITY_HSTROK_U,
	MANUAL_ENTITY_HSTROK_L,
	MANUAL_ENTITY_ITILDE_U,
	MANUAL_ENTITY_ITILDE_L,
	MANUAL_ENTITY_IMACR_U,
	MANUAL_ENTITY_IMACR_L,
	MANUAL_ENTITY_IOGON_U,
	MANUAL_ENTITY_IOGON_L,
	MANUAL_ENTITY_IDOT_U,
	MANUAL_ENTITY_INODOT_L,
	MANUAL_ENTITY_IJLIG_U,
	MANUAL_ENTITY_IJLIG_L,
	MANUAL_ENTITY_JCIRC_U,
	MANUAL_ENTITY_JCIRC_L,
	MANUAL_ENTITY_KCEDIL_U,
	MANUAL_ENTITY_KCEDIL_L,
	MANUAL_ENTITY_KGREEN_L,
	MANUAL_ENTITY_LACUTE_U,
	MANUAL_ENTITY_LACUTE_L,
	MANUAL_ENTITY_LCEDIL_U,
	MANUAL_ENTITY_LCEDIL_L,
	MANUAL_ENTITY_LCARON_U,
	MANUAL_ENTITY_LCARON_L,
	MANUAL_ENTITY_LMIDOT_U,
	MANUAL_ENTITY_LMIDOT_L,
	MANUAL_ENTITY_LSTROK_U,
	MANUAL_ENTITY_LSTROK_L,
	MANUAL_ENTITY_NACUTE_U,
	MANUAL_ENTITY_NACUTE_L,
	MANUAL_ENTITY_NCEDIL_U,
	MANUAL_ENTITY_NCEDIL_L,
	MANUAL_ENTITY_NCARON_U,
	MANUAL_ENTITY_NCARON_L,
	MANUAL_ENTITY_NAPOS_L,
	MANUAL_ENTITY_ENG_U,
	MANUAL_ENTITY_ENG_L,
	MANUAL_ENTITY_OMACR_U,
	MANUAL_ENTITY_OMACR_L,
	MANUAL_ENTITY_ODBLAC_U,
	MANUAL_ENTITY_ODBLAC_L,
	MANUAL_ENTITY_OELIG_U,
	MANUAL_ENTITY_OELIG_L,
	MANUAL_ENTITY_RACUTE_U,
	MANUAL_ENTITY_RACUTE_L,
	MANUAL_ENTITY_RCEDIL_U,
	MANUAL_ENTITY_RCEDIL_L,
	MANUAL_ENTITY_RCARON_U,
	MANUAL_ENTITY_RCARON_L,
	MANUAL_ENTITY_SACUTE_U,
	MANUAL_ENTITY_SACUTE_L,
	MANUAL_ENTITY_SCIRC_U,
	MANUAL_ENTITY_SCIRC_L,
	MANUAL_ENTITY_SCEDIL_U,
	MANUAL_ENTITY_SCEDIL_L,
	MANUAL_ENTITY_SCARON_U,
	MANUAL_ENTITY_SCARON_L,
	MANUAL_ENTITY_TCEDIL_U,
	MANUAL_ENTITY_TCEDIL_L,
	MANUAL_ENTITY_TCARON_U,
	MANUAL_ENTITY_TCARON_L,
	MANUAL_ENTITY_TSTROK_U,
	MANUAL_ENTITY_TSTROK_L,
	MANUAL_ENTITY_UTILDE_U,
	MANUAL_ENTITY_UTILDE_L,
	MANUAL_ENTITY_UMACR_U,
	MANUAL_ENTITY_UMACR_L,
	MANUAL_ENTITY_UBREVE_U,
	MANUAL_ENTITY_UBREVE_L,
	MANUAL_ENTITY_URING_U,
	MANUAL_ENTITY_URING_L,
	MANUAL_ENTITY_UDBLAC_U,
	MANUAL_ENTITY_UDBLAC_L,
	MANUAL_ENTITY_UOGON_U,
	MANUAL_ENTITY_UOGON_L,
	MANUAL_ENTITY_WCIRC_U,
	MANUAL_ENTITY_WCIRC_L,
	MANUAL_ENTITY_YCIRC_U,
	MANUAL_ENTITY_YCIRC_L,
	MANUAL_ENTITY_YUML_U,
	MANUAL_ENTITY_ZACUTE_U,
	MANUAL_ENTITY_ZACUTE_L,
	MANUAL_ENTITY_ZDOT_U,
	MANUAL_ENTITY_ZDOT_L,
	MANUAL_ENTITY_ZCARON_U,
	MANUAL_ENTITY_ZCARON_L,

	/* General Punctuation */

	MANUAL_ENTITY_ENSP,
	MANUAL_ENTITY_EMSP,
	MANUAL_ENTITY_EMSP13,
	MANUAL_ENTITY_EMSP14,
	MANUAL_ENTITY_NUMSP,
	MANUAL_ENTITY_PUNCSP,
	MANUAL_ENTITY_THINSP,
	MANUAL_ENTITY_HAIRSP,
	MANUAL_ENTITY_ZEROWIDTHSPACE,
	MANUAL_ENTITY_ZWNJ,
	MANUAL_ENTITY_ZWJ,
	MANUAL_ENTITY_LRM,
	MANUAL_ENTITY_RLM,
	MANUAL_ENTITY_DASH,
	MANUAL_ENTITY_NDASH,
	MANUAL_ENTITY_MDASH,
	MANUAL_ENTITY_HORBAR,
	MANUAL_ENTITY_VERBAR,
	MANUAL_ENTITY_LSQUO,
	MANUAL_ENTITY_RSQUO,
	MANUAL_ENTITY_LDQUO,
	MANUAL_ENTITY_RDQUO,

	/* Mathematical Operators */

	MANUAL_ENTITY_FORALL,
	MANUAL_ENTITY_COMP,
	MANUAL_ENTITY_PART,
	MANUAL_ENTITY_EXIST,
	MANUAL_ENTITY_NEXIST,
	MANUAL_ENTITY_EMPTY,
	MANUAL_ENTITY_NABLA,
	MANUAL_ENTITY_IN,
	MANUAL_ENTITY_NOTIN,
	MANUAL_ENTITY_NI,
	MANUAL_ENTITY_NOTNI,
	MANUAL_ENTITY_PROD,
	MANUAL_ENTITY_COPROD,
	MANUAL_ENTITY_SUM,
	MANUAL_ENTITY_MINUS,
	MANUAL_ENTITY_MNPLUS,

	MANUAL_ENTITY_LE,
	MANUAL_ENTITY_GE,
	MANUAL_ENTITY_LEQQ,
	MANUAL_ENTITY_GEQQ,

	/* End of List */

	MANUAL_ENTITY_NONE
};

/**
 * Given a node containing an entity, return the entity type.
 *
 * \param *name		Pointer to the textual entity name.
 * \return		The entity type, or MANUAL_ENTITY_NONE if unknown.
 */

enum manual_entity_type manual_entity_find_type(char *name);

/**
 * Given an entity type, return the textual entity name.
 *
 * \param type		The entity type to look up.
 * \return		Pointer to the entity's textual name, or to "" if
 *			the type was not recognised.
 */

const char *manual_entity_find_name(enum manual_entity_type type);

/**
 * Given an entity type, return the Unicode codepoint.
 *
 * \param type		The entity type to look up.
 * \return		The Unicode codepoint, or -1 if not recognised.
 */

int manual_entity_find_codepoint(enum manual_entity_type type);

/**
 * Given a unicode code point, return an appropriate entity name
 * if one exists.
 *
 * \param type		The entity type to look up.
 * \return		Pointer to the entity's textual name, or to "" if
 *			the type was not recognised.
 */

const char *manual_entity_find_name_from_codepoint(int codepoint);

#endif
